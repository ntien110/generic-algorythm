from random import randint
import time

# the population
maxSample =1000
# genetic 50 time
genTime = 50

# the ratio of mutation in the population after each generation was borned
mutateRatio = 5
p60 = maxSample * 6 // 10
p40 = maxSample - p60


def rate(arr, tar):
    out = 0
    cur = [0 for i in range(12)]
    for i in range(8):
        out += arr[i]
        cur[i] += arr[i]
        cur[i + 1] += arr[i]
        cur[i + 3] += arr[i]
        cur[i + 4] += arr[i]
    for i in range(4, 8):
        if cur[i] < tar[i]:
            out += (tar[i] - cur[i]) * 5
        # else:
        #     out += cur[i] - tar[i]
    for i in [0, 11]:
        if cur[i] < tar[i]:
            out += (tar[i] - cur[i]) * 5 * 4
    for i in [1, 2, 9, 10]:
        if cur[i] < tar[i]:
            out += (tar[i] - cur[i]) * 5 * 2
    for i in [3, 8]:
        if cur[i] < tar[i]:
            out += (tar[i] - cur[i]) * 5 * 4 // 3
    return out


def takeEighth(elem):
    return elem[8]

def genneticAlgo(target):
    maxTarget = max(target)
    # generate the first population
    population = [[randint(0, maxTarget) for i in range(9)] for j in range(maxSample)]
    for k in range(genTime):
        # calculate how adaptive the samples are, store in the 8th element of *population[i]
        for i in range(maxSample):
            population[i][8] = rate(population[i], target)
        # eliminate the individuals have hight adaptation point, replace them with the individuals generated by combinning those have low point
        population=sorted(population, key=takeEighth)
        for i in range(p60, maxSample):
            # father and mother 's index in population array
            fa = randint(0, p40 - 1)
            mo = randint(0, p40 - 1)
            for j in range(8):
                if randint(0, 1):
                    population[i][j] = population[fa][j]
                else:
                    population[i][j] = population[mo][j]
        # mutate
        for i in range(maxSample * mutateRatio // 100):
            population[randint(0, maxSample - 1)][randint(0, 7)] = randint(0, 40)
    # finish up
    maxAdapt = 99999
    for i in range(maxSample):
        population[i][8] = rate(population[i], target)
        if population[i][8] < maxAdapt:
            maxAdapt = population[i][8]
            j = i
    return population[j]


print('type in the number of nurses needed:  ')
inp = [int(input()) for i in range(12)]
print('wait a second...')
best = 99999
for t in range(20):
    temp = genneticAlgo(inp)
    if best > temp[8]:
        bestResult = temp
        best = temp[8]
print(bestResult[0:8])
print(bestResult[8])
